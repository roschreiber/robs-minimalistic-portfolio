---
interface Device {
  name: string;
  battery: string;
  connection: string;
  charging: string;
  time: number;
}

let devices: Device[] = [];

try {
  console.log('Fetching devices...');
  const baseUrl = import.meta.env.BASE_URL;
  const password = import.meta.env.APPLE_PW;
  const response = await fetch(`${baseUrl}/api/battery?password=${password}`);
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const data = await response.json();
  console.log('Received data:', data);
  devices = data.apple || [];
} catch (error) {
  console.error('Error fetching devices:', error);
}

// Helper function to format the timestamp
function formatLastUpdated(timestamp: number): string {
  const now = Date.now();
  const diff = now - timestamp;
  
  if (diff < 60000) return 'Just now';
  if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
  if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
  return `${Math.floor(diff / 86400000)}d ago`;
}
---

<div class="rounded-lg border bg-card text-card-foreground shadow-sm w-full mt-4">
  <div class="flex flex-col space-y-1.5 p-6">
    <h1 class="font-semibold tracking-tight text-lg text-white">Connected Devices</h1>
    <p class="text-xs text-muted-foreground text-white text-opacity-75">Battery status and connection info</p>
  </div>
  <div class="p-6 pt-0 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
    {devices.map((device) => (
      <div class="flex flex-col gap-2 rounded-lg border border-white border-opacity-20 p-4">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-medium text-white">{device.name}</h3>
          <span class="text-sm text-white text-opacity-75">{device.connection}</span>
        </div>
        <div class="relative w-full h-2 bg-white bg-opacity-10 rounded">
          <div
            class={`absolute left-0 top-0 h-full rounded ${
              parseInt(device.battery) <= 20 ? 'bg-red-500' : 
              parseInt(device.battery) <= 50 ? 'bg-yellow-500' : 'bg-green-500'
            }`}
            style={`width: ${device.battery}%`}
          />
        </div>
        <div class="flex justify-between items-center">
          <span class="text-sm text-white">{device.battery}%</span>
          <span class="text-xs text-white text-opacity-50">{formatLastUpdated(device.time)}</span>
          {device.charging === 'true' && (
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="text-green-500">
              <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/>
            </svg>
          )}
        </div>
      </div>
    ))}
  </div>
</div>
