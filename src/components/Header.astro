---
const navItems = ['home', 'who am i', 'my work', 'tools', 'my stats'];
const dropdownItems: { [key: string]: { name: string; href: string; }[] } = {
  'my stats': [
    //{name: 'music', href: '/music'},
    {name: 'setup', href: '/setup'},
  ]
};
---

<header class="bg-black text-white py-4">
  <div class="mb-1">
    <h1 class="text-7xl font-bold" style="font-family: arial;">
      <span id="rob-text" class="cursor-pointer">rob</span><span id="status-dot" class="text-8xl" style="font-family: Sans;">.</span>
    </h1>
  </div>
  <nav class="relative">
    <ul class="flex space-x-4">
      {navItems.map((item) => {
        const href = item === 'home' ? '/' : item === 'who am i' ? '/whoami' : item === 'my work' ? '/work' : item === 'my stats' ? '/stats' : item === 'tools' ? '/tools' : `#${item.replace(/\s+/g, '').toLowerCase()}`;
        return (
          <li class="relative group flex items-center text-2xl">
            <a id={`nav-${item.replace(/\s+/g, '').toLowerCase()}`} href={href} class="hover:underline font-semibold" onclick="updateUnderlineBar()">{item}</a>
            {dropdownItems[item] && (
              <div class="relative flex flex-col">
                <img 
                  src="/imgs/caret-down-solid.svg" 
                  alt="dropdown" 
                  class="h-4 mt-1.5 cursor-pointer select-none 2xl:h-6 ml-1 rotate-0" 
                  onclick="(function(event) {
                    const dropdown = event.currentTarget.nextElementSibling;
                    const caret = event.currentTarget;
                    if (dropdown.classList.contains('dropdown-appear')) {
                      dropdown.classList.remove('dropdown-appear');
                      caret.classList.remove('rotate-180');
                      caret.classList.add('rotate-0');
                      setTimeout(() => { dropdown.style.display = 'none'; }, 300);
                    } else {
                      dropdown.style.display = 'block';
                      setTimeout(() => { dropdown.classList.add('dropdown-appear'); }, 10);
                      caret.classList.remove('rotate-0');
                      caret.classList.add('rotate-180');
                    }
                  })(event)"
                />
                <div class="absolute right-0 top-6 font-semibold z-50 flex flex-col rounded-md border border-white border-opacity-20 bg-black py-2 md:-left-4 md:right-auto 2xl:top-8 dropdown-content" style="display: none;">
                  {dropdownItems[item].map((subItem) => (
                    <a class="flex py-0.5 pl-4 pr-8 transition duration-300 hover:bg-white hover:bg-opacity-10" href={subItem.href}>
                      <p class="text-2xl text-white">{subItem.name}</p>
                    </a>
                  ))}
                </div>
              </div>
            )}
          </li>
        );
      })}
    </ul>
    <div id="underline-bar" class="absolute bottom-0 h-1 bg-white transition-all duration-150"></div>
  </nav>
</header>

<audio id="announcer-sfx" src="/sfx/announcersfx.mp3" preload="auto"></audio>

<style>
.rotate-180 {
  transition: transform 0.1s cubic-bezier(0.25, 1, 0.5, 1);
  transform: rotate(180deg);
}

.rotate-0 {
  transition: transform 0.1s cubic-bezier(0.25, 1, 0.5, 1);
  transform: rotate(0deg);
}

.no-underline {
  text-decoration: none !important;
}

.dropdown-content {
  opacity: 0;
  transition: opacity 0.3s ease;
}

.dropdown-appear {
  opacity: 1 !important;
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const discordID = import.meta.env.DISCORD_ID;
    const robText = document.getElementById('rob-text');
    const announcerSfx = document.getElementById('announcer-sfx') as HTMLAudioElement;

    robText?.addEventListener('click', () => {
      announcerSfx?.play();
    });

    const pathToId: { [key: string]: string } = {
      '/': 'home',
      '/whoami': 'whoami',
      '/work': 'mywork',
      '/stats': 'mystats',
      '/wip': 'tools',
    };
    
    const underlineBar = document.getElementById('underline-bar');
    const nav = document.querySelector('nav');
    
    const updateUnderlineBar = () => {
      if (!underlineBar || !nav) return;
      
      const currentPath = window.location.pathname;
      const currentId = pathToId[currentPath];
      
      if (currentId) {
        const navElement = document.getElementById(`nav-${currentId}`);
        if (navElement) {
          const navRect = nav.getBoundingClientRect();
          const elementRect = navElement.getBoundingClientRect();
          const relativeLeft = elementRect.left - navRect.left;
          
          underlineBar.style.width = `${elementRect.width}px`;
          underlineBar.style.transform = `translateX(${relativeLeft}px)`;
          navElement.classList.add('no-underline');
        }
      }
    };

    updateUnderlineBar();
    window.addEventListener('hashchange', updateUnderlineBar);
    window.addEventListener('resize', updateUnderlineBar);
    window.addEventListener('load', updateUnderlineBar);
    window.addEventListener('popstate', updateUnderlineBar);

    const updateStatusDot = async () => {
      try {
        const response = await fetch(`https://api.lanyard.rest/v1/users/${discordID}`);
        const data = await response.json();
        const status = data.data.discord_status;
        const statusDot = document.getElementById('status-dot');

        if (statusDot) {
          switch (status) {
            case 'online':
              statusDot.classList.add('text-green-400');
              statusDot.classList.remove('text-red-400', 'text-yellow-400', 'text-gray-400');
              break;
            case 'idle':
              statusDot.classList.add('text-yellow-400');
              statusDot.classList.remove('text-red-400', 'text-green-400', 'text-gray-400');
              break;
            case 'dnd':
              statusDot.classList.add('text-red-400');
              statusDot.classList.remove('text-green-400', 'text-yellow-400', 'text-gray-400');
              break;
            case 'offline':
              statusDot.classList.add('text-gray-400');
              statusDot.classList.remove('text-red-400', 'text-green-400', 'text-yellow-400');
              break;
            default:
              break;
          }
        }
      } catch (error) {
        console.error('Error fetching Discord status:', error);
      }
    };

    updateStatusDot();
    setInterval(updateStatusDot, 60000);
  });
</script>