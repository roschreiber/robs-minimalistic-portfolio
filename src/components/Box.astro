---
interface Language {
  name: string;
  color: string;
}

interface Props {
  image: string;
  title: string;
  description: string;
  status: 'online' | 'offline' | 'maintenance';
  users: string;
  languages: Language[];
  class?: string;  
}

const { image, title, description, status, users, languages, class: className } = Astro.props;
---

<div class={`flex w-full flex-col overflow-hidden rounded-lg border border-white border-opacity-20 transition duration-300 hover:bg-white hover:bg-opacity-5 ${className || ''}`} style="opacity: 1; transform: none;">
  <div class="flex w-full flex-row items-start gap-2 p-3">
    <img src={image} class="h-10 w-10 rounded" alt={title}>
    <div class="flex flex-col">
      <div class="flex items-center gap-2">
        <h3 class="font-semibold text-white text-xl">{title}</h3> <!-- Increased font size and weight -->
        <div class={`h-2 w-2 rounded-full ${status === 'online' ? 'bg-green-600' : status === 'offline' ? 'bg-red-600' : 'bg-yellow-600'}`}></div>
      </div>
      <p class="text-sm font-normal text-white text-opacity-80">{description}</p> <!-- Increased font size and weight -->
    </div>
  </div>
  <div class="flex w-full items-center gap-2 overflow-hidden px-3 pb-3">
    <div class="flex items-center gap-2 whitespace-nowrap rounded bg-white bg-opacity-10 px-3 py-1 border border-opacity-20" style="border-color: gray; filter: contrast(0.3);">
      <p class="text-sm font-normal text-white">{users} Users</p> <!-- Increased font size and weight -->
    </div>
    {languages.map((language: Language) => (
      <div class="flex items-center gap-2 whitespace-nowrap rounded bg-white bg-opacity-10 px-3 py-1 border border-opacity-20" style={`border-color: ${language.color}; filter: contrast(0.3);`}>
        <div class={`h-1.5 w-1.5 rounded-full`} style={`background-color: ${language.color};`}></div>
        <p class="text-sm font-normal text-white">{language.name}</p> <!-- Increased font size and weight -->
      </div>
    ))}
  </div>
</div>